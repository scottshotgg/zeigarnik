// Code generated by protoc-gen-struct-transformer, version: 1.0.7-dev. DO NOT EDIT.
// source file: zeigarnik.proto
// source package: reminder.v1alpha1

package transform

import (
	reminder "github.com/scottshotgg/zeigarnik/pkg/reminder/v1alpha1"
	"github.com/scottshotgg/zeigarnik/pkg/storage/sql"
	"github.com/scottshotgg/zeigarnik/pkg/types/helpers"
)

// message "ListRemindersReq" has no option "transformer.go_struct", skipped...
// message "ListRemindersRes" has no option "transformer.go_struct", skipped...
// message "GetReminderByIDReq" has no option "transformer.go_struct", skipped...
// message "GetReminderByIDRes" has no option "transformer.go_struct", skipped...
// message "CreateReminderReq" has no option "transformer.go_struct", skipped...
// message "CreateReminderRes" has no option "transformer.go_struct", skipped...
// message "UpdateReminderReq" has no option "transformer.go_struct", skipped...
// message "UpdateReminderRes" has no option "transformer.go_struct", skipped...
// message "DeleteReminderReq" has no option "transformer.go_struct", skipped...
// message "DeleteReminderRes" has no option "transformer.go_struct", skipped...
func PbToReminderPtr(src *reminder.Reminder, opts ...TransformParam) *sql.Reminder {
	if src == nil {
		return nil
	}

	d := PbToReminder(*src, opts...)
	return &d
}

func PbToReminderPtrList(src []*reminder.Reminder, opts ...TransformParam) []*sql.Reminder {
	resp := make([]*sql.Reminder, len(src))

	for i, s := range src {
		resp[i] = PbToReminderPtr(s, opts...)
	}

	return resp
}

func PbToReminderPtrVal(src *reminder.Reminder, opts ...TransformParam) sql.Reminder {
	if src == nil {
		return sql.Reminder{}
	}

	return PbToReminder(*src, opts...)
}

func PbToReminderPtrValList(src []*reminder.Reminder, opts ...TransformParam) []sql.Reminder {
	resp := make([]sql.Reminder, len(src))

	for i, s := range src {
		resp[i] = PbToReminder(*s)
	}

	return resp
}

// PbToReminderList is DEPRECATED. Use PbToReminderPtrValList instead.
func PbToReminderList(src []*reminder.Reminder, opts ...TransformParam) []sql.Reminder {
	return PbToReminderPtrValList(src)
}

func PbToReminder(src reminder.Reminder, opts ...TransformParam) sql.Reminder {
	s := sql.Reminder{
		ID:      helpers.StringToUuidUUID(src.Id),
		Created: src.Created,
		Msg:     src.Message,
		Recip:   src.To,
		Rstatus: helpers.StatusToString(src.Status),
		Atwhen:  src.When,
		Typeof:  helpers.TypeToString(src.TypeOf),
		Warnat:  src.WarnAt,
	}

	applyOptions(opts...)

	return s
}

func PbToReminderValPtr(src reminder.Reminder, opts ...TransformParam) *sql.Reminder {
	d := PbToReminder(src, opts...)
	return &d
}

func PbToReminderValList(src []reminder.Reminder, opts ...TransformParam) []sql.Reminder {
	resp := make([]sql.Reminder, len(src))

	for i, s := range src {
		resp[i] = PbToReminder(s, opts...)
	}

	return resp
}

func ReminderToPbPtr(src *sql.Reminder, opts ...TransformParam) *reminder.Reminder {
	if src == nil {
		return nil
	}

	d := ReminderToPb(*src, opts...)
	return &d
}

func ReminderToPbPtrList(src []*sql.Reminder, opts ...TransformParam) []*reminder.Reminder {
	resp := make([]*reminder.Reminder, len(src))

	for i, s := range src {
		resp[i] = ReminderToPbPtr(s, opts...)
	}

	return resp
}

func ReminderToPbPtrVal(src *sql.Reminder, opts ...TransformParam) reminder.Reminder {
	if src == nil {
		return reminder.Reminder{}
	}

	return ReminderToPb(*src, opts...)
}

func ReminderToPbValPtrList(src []sql.Reminder, opts ...TransformParam) []*reminder.Reminder {
	resp := make([]*reminder.Reminder, len(src))

	for i, s := range src {
		g := ReminderToPb(s, opts...)
		resp[i] = &g
	}

	return resp
}

// ReminderToPbList is DEPRECATED. Use ReminderToPbValPtrList instead.
func ReminderToPbList(src []sql.Reminder, opts ...TransformParam) []*reminder.Reminder {
	return ReminderToPbValPtrList(src)
}

func ReminderToPb(src sql.Reminder, opts ...TransformParam) reminder.Reminder {
	s := reminder.Reminder{
		Id:      helpers.UuidUUIDToString(src.ID),
		Created: src.Created,
		Message: src.Msg,
		To:      src.Recip,
		Status:  helpers.StringToStatus(src.Rstatus),
		When:    src.Atwhen,
		TypeOf:  helpers.StringToType(src.Typeof),
		WarnAt:  src.Warnat,
	}

	applyOptions(opts...)

	return s
}

func ReminderToPbValPtr(src sql.Reminder, opts ...TransformParam) *reminder.Reminder {
	d := ReminderToPb(src, opts...)
	return &d
}

func ReminderToPbValList(src []sql.Reminder, opts ...TransformParam) []reminder.Reminder {
	resp := make([]reminder.Reminder, len(src))

	for i, s := range src {
		resp[i] = ReminderToPb(s, opts...)
	}

	return resp
}
