// Code generated by proroc-gen-graphql, DO NOT EDIT.
package reminder

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__enum_ReminderType       *graphql.Enum        // enum ReminderType in zeigarnik.proto
	gql__enum_ReminderStatus     *graphql.Enum        // enum ReminderStatus in zeigarnik.proto
	gql__type_UpdateReminderRes  *graphql.Object      // message UpdateReminderRes in zeigarnik.proto
	gql__type_UpdateReminderReq  *graphql.Object      // message UpdateReminderReq in zeigarnik.proto
	gql__type_Reminder           *graphql.Object      // message Reminder in zeigarnik.proto
	gql__type_ListRemindersRes   *graphql.Object      // message ListRemindersRes in zeigarnik.proto
	gql__type_GetReminderByIDRes *graphql.Object      // message GetReminderByIDRes in zeigarnik.proto
	gql__type_GetReminderByIDReq *graphql.Object      // message GetReminderByIDReq in zeigarnik.proto
	gql__type_DeleteReminderRes  *graphql.Object      // message DeleteReminderRes in zeigarnik.proto
	gql__type_DeleteReminderReq  *graphql.Object      // message DeleteReminderReq in zeigarnik.proto
	gql__type_CreateReminderRes  *graphql.Object      // message CreateReminderRes in zeigarnik.proto
	gql__type_CreateReminderReq  *graphql.Object      // message CreateReminderReq in zeigarnik.proto
	gql__input_UpdateReminderReq *graphql.InputObject // message UpdateReminderReq in zeigarnik.proto
	gql__input_Reminder          *graphql.InputObject // message Reminder in zeigarnik.proto
	gql__input_CreateReminderReq *graphql.InputObject // message CreateReminderReq in zeigarnik.proto
)

func Gql__enum_ReminderType() *graphql.Enum {
	if gql__enum_ReminderType == nil {
		gql__enum_ReminderType = graphql.NewEnum(graphql.EnumConfig{
			Name: "Reminder_Enum_ReminderType",
			Values: graphql.EnumValueConfigMap{
				"INVALID": &graphql.EnumValueConfig{
					Value: ReminderType(0),
				},
				"AT": &graphql.EnumValueConfig{
					Value: ReminderType(1),
				},
				"AFTER": &graphql.EnumValueConfig{
					Value: ReminderType(2),
				},
			},
		})
	}
	return gql__enum_ReminderType
}

func Gql__enum_ReminderStatus() *graphql.Enum {
	if gql__enum_ReminderStatus == nil {
		gql__enum_ReminderStatus = graphql.NewEnum(graphql.EnumConfig{
			Name: "Reminder_Enum_ReminderStatus",
			Values: graphql.EnumValueConfigMap{
				"UNKNOWN": &graphql.EnumValueConfig{
					Value: ReminderStatus(0),
				},
				"CREATED": &graphql.EnumValueConfig{
					Value: ReminderStatus(1),
				},
				"QUEUED": &graphql.EnumValueConfig{
					Value: ReminderStatus(2),
				},
				"FIRED": &graphql.EnumValueConfig{
					Value: ReminderStatus(3),
				},
				"MISSED": &graphql.EnumValueConfig{
					Value: ReminderStatus(4),
				},
			},
		})
	}
	return gql__enum_ReminderStatus
}

func Gql__type_UpdateReminderRes() *graphql.Object {
	if gql__type_UpdateReminderRes == nil {
		gql__type_UpdateReminderRes = graphql.NewObject(graphql.ObjectConfig{
			Name: "Reminder_Type_UpdateReminderRes",
			Fields: graphql.Fields{
				"reminder": &graphql.Field{
					Type: reminder.Gql__type_Reminder(),
				},
			},
		})
	}
	return gql__type_UpdateReminderRes
}

func Gql__type_UpdateReminderReq() *graphql.Object {
	if gql__type_UpdateReminderReq == nil {
		gql__type_UpdateReminderReq = graphql.NewObject(graphql.ObjectConfig{
			Name: "Reminder_Type_UpdateReminderReq",
			Fields: graphql.Fields{
				"reminder": &graphql.Field{
					Type: reminder.Gql__type_Reminder(),
				},
			},
		})
	}
	return gql__type_UpdateReminderReq
}

func Gql__type_Reminder() *graphql.Object {
	if gql__type_Reminder == nil {
		gql__type_Reminder = graphql.NewObject(graphql.ObjectConfig{
			Name: "Reminder_Type_Reminder",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
				"created": &graphql.Field{
					Type: graphql.Int,
				},
				"message": &graphql.Field{
					Type: graphql.String,
				},
				"to": &graphql.Field{
					Type: graphql.String,
				},
				"status": &graphql.Field{
					Type: reminder.Gql__enum_ReminderStatus(),
				},
				"when": &graphql.Field{
					Type: graphql.Int,
				},
				"type": &graphql.Field{
					Type: reminder.Gql__enum_ReminderType(),
				},
				"warnAt": &graphql.Field{
					Type: graphql.NewList(graphql.Int),
				},
			},
		})
	}
	return gql__type_Reminder
}

func Gql__type_ListRemindersRes() *graphql.Object {
	if gql__type_ListRemindersRes == nil {
		gql__type_ListRemindersRes = graphql.NewObject(graphql.ObjectConfig{
			Name: "Reminder_Type_ListRemindersRes",
			Fields: graphql.Fields{
				"reminders": &graphql.Field{
					Type: graphql.NewList(graphql.String),
				},
			},
		})
	}
	return gql__type_ListRemindersRes
}

func Gql__type_GetReminderByIDRes() *graphql.Object {
	if gql__type_GetReminderByIDRes == nil {
		gql__type_GetReminderByIDRes = graphql.NewObject(graphql.ObjectConfig{
			Name: "Reminder_Type_GetReminderByIDRes",
			Fields: graphql.Fields{
				"reminder": &graphql.Field{
					Type: reminder.Gql__type_Reminder(),
				},
			},
		})
	}
	return gql__type_GetReminderByIDRes
}

func Gql__type_GetReminderByIDReq() *graphql.Object {
	if gql__type_GetReminderByIDReq == nil {
		gql__type_GetReminderByIDReq = graphql.NewObject(graphql.ObjectConfig{
			Name: "Reminder_Type_GetReminderByIDReq",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_GetReminderByIDReq
}

func Gql__type_DeleteReminderRes() *graphql.Object {
	if gql__type_DeleteReminderRes == nil {
		gql__type_DeleteReminderRes = graphql.NewObject(graphql.ObjectConfig{
			Name: "Reminder_Type_DeleteReminderRes",
			Fields: graphql.Fields{
				"deleted": &graphql.Field{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__type_DeleteReminderRes
}

func Gql__type_DeleteReminderReq() *graphql.Object {
	if gql__type_DeleteReminderReq == nil {
		gql__type_DeleteReminderReq = graphql.NewObject(graphql.ObjectConfig{
			Name: "Reminder_Type_DeleteReminderReq",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_DeleteReminderReq
}

func Gql__type_CreateReminderRes() *graphql.Object {
	if gql__type_CreateReminderRes == nil {
		gql__type_CreateReminderRes = graphql.NewObject(graphql.ObjectConfig{
			Name: "Reminder_Type_CreateReminderRes",
			Fields: graphql.Fields{
				"reminder": &graphql.Field{
					Type: reminder.Gql__type_Reminder(),
				},
			},
		})
	}
	return gql__type_CreateReminderRes
}

func Gql__type_CreateReminderReq() *graphql.Object {
	if gql__type_CreateReminderReq == nil {
		gql__type_CreateReminderReq = graphql.NewObject(graphql.ObjectConfig{
			Name: "Reminder_Type_CreateReminderReq",
			Fields: graphql.Fields{
				"reminder": &graphql.Field{
					Type: reminder.Gql__type_Reminder(),
				},
			},
		})
	}
	return gql__type_CreateReminderReq
}

func Gql__input_UpdateReminderReq() *graphql.InputObject {
	if gql__input_UpdateReminderReq == nil {
		gql__input_UpdateReminderReq = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Reminder_Input_UpdateReminderReq",
			Fields: graphql.InputObjectConfigFieldMap{
				"reminder": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Reminder(),
				},
			},
		})
	}
	return gql__input_UpdateReminderReq
}

func Gql__input_Reminder() *graphql.InputObject {
	if gql__input_Reminder == nil {
		gql__input_Reminder = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Reminder_Input_Reminder",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"created": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"message": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"to": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"status": &graphql.InputObjectFieldConfig{
					Type: reminder.Gql__enum_ReminderStatus(),
				},
				"when": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"type": &graphql.InputObjectFieldConfig{
					Type: reminder.Gql__enum_ReminderType(),
				},
				"warnAt": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(graphql.Int),
				},
			},
		})
	}
	return gql__input_Reminder
}

func Gql__input_CreateReminderReq() *graphql.InputObject {
	if gql__input_CreateReminderReq == nil {
		gql__input_CreateReminderReq = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Reminder_Input_CreateReminderReq",
			Fields: graphql.InputObjectConfigFieldMap{
				"reminder": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Reminder(),
				},
			},
		})
	}
	return gql__input_CreateReminderReq
}

// graphql__resolver_ReminderService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_ReminderService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_ReminderService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_ReminderService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"getReminderByID": &graphql.Field{
			Type: Gql__type_GetReminderByIDRes(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetReminderByIDReq
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, err
				}
				client := NewReminderServiceClient(conn)
				resp, err := client.GetReminder(p.Context, &req)
				if err != nil {
					return nil, err
				}
				return resp, nil
			},
		},
		"deleteReminder": &graphql.Field{
			Type: Gql__type_DeleteReminderRes(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req DeleteReminderReq
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, err
				}
				client := NewReminderServiceClient(conn)
				resp, err := client.DeleteReminder(p.Context, &req)
				if err != nil {
					return nil, err
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_ReminderService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"createReminder": &graphql.Field{
			Type: Gql__type_CreateReminderRes(),
			Args: graphql.FieldConfigArgument{
				"reminder": &graphql.ArgumentConfig{
					Type: Gql__input_Reminder(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req CreateReminderReq
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, err
				}
				client := NewReminderServiceClient(conn)
				resp, err := client.CreateReminder(p.Context, &req)
				if err != nil {
					return nil, err
				}
				return resp, nil
			},
		},

		"updateReminder": &graphql.Field{
			Type: Gql__type_UpdateReminderRes(),
			Args: graphql.FieldConfigArgument{
				"reminder": &graphql.ArgumentConfig{
					Type: Gql__input_Reminder(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req UpdateReminderReq
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, err
				}
				client := NewReminderServiceClient(conn)
				resp, err := client.UpdateReminder(p.Context, &req)
				if err != nil {
					return nil, err
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterReminderServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterReminderServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterReminderServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service ReminderService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterReminderServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(&graphql__resolver_ReminderService{
		conn: conn,
		host: "localhost:5001",
		dialOptions: []grpc.DialOption{
			grpc.WithInsecure(),
		},
	})
}
